import { validationResult } from "express-validator";

/**
 * üö® MIDDLEWARE DE MANEJO DE ERRORES DE VALIDACI√ìN
 *
 * ¬øQu√© hace este middleware?
 * - Intercepta errores de validaci√≥n de express-validator
 * - Convierte errores t√©cnicos en mensajes user-friendly
 * - Devuelve c√≥digos HTTP espec√≠ficos seg√∫n el tipo de error
 * - Centraliza el manejo de errores para consistencia
 *
 * ¬øCu√°ndo se ejecuta?
 * - Despu√©s de middlewares de validaci√≥n (ej: validateOwners, validateClients)
 * - Antes de llegar al controller
 * - Solo si hay errores de validaci√≥n
 *
 * Flujo t√≠pico:
 * Request ‚Üí Validation Middleware ‚Üí Error Handler ‚Üí Controller (si no hay errores)
 *                                       ‚Üì
 *                                   Error Response (si hay errores)
 *
 * Ejemplo de uso:
 * router.post('/users', validateUser, errorHandler, createUserController);
 */

// ==========================================
// üó∫Ô∏è MAPEOS DE ERRORES PERSONALIZADOS
// ==========================================

/**
 * üìù Diccionario de mensajes de error espec√≠ficos por campo
 *
 * ¬øPor qu√© usar mapeos?
 * - Mensajes consistentes en toda la aplicaci√≥n
 * - F√°cil localizaci√≥n/traducci√≥n en el futuro
 * - Mensajes user-friendly vs errores t√©cnicos
 * - Centralizaci√≥n de mensajes para mantenimiento
 *
 * Estructura: { nombreCampo: 'Mensaje para el usuario' }
 *
 * ¬øC√≥mo agregar nuevos campos?
 * 1. Agregar entrada en ParamErrorMessages
 * 2. Agregar c√≥digo HTTP correspondiente en ParamHttpCodes
 * 3. El errorHandler autom√°ticamente los usar√°
 */
const ParamErrorMessages = {
    // üìß VALIDACIONES DE CONTACTO
    'email': 'Email inv√°lido',                    // Formato de email incorrecto
    'phone': 'Tel√©fono inv√°lido',                // Formato de tel√©fono incorrecto

    // üë§ VALIDACIONES DE USUARIO
    'username': 'Nombre de usuario duplicado',    // Username ya existe en BD

    // üÜî VALIDACIONES DE IDENTIFICACI√ìN
    'nif': 'Identificaci√≥n requerida',           // NIF/NIE/Pasaporte faltante o inv√°lido

    // üè¢ VALIDACIONES DE CLIENTE
    'clientName': 'Nombre de cliente requerido', // Campo obligatorio faltante

    // üè† VALIDACIONES DE PROPIEDAD
    'referenceCadastral': 'Referencia catastral requerida'  // Campo espec√≠fico inmobiliario
};

/**
 * üî¢ Diccionario de c√≥digos HTTP espec√≠ficos por tipo de error
 *
 * ¬øPor qu√© c√≥digos espec√≠ficos?
 * - 400 (Bad Request): Datos mal formateados o faltantes
 * - 409 (Conflict): Recursos duplicados (username, email existente)
 * - 422 (Unprocessable Entity): Datos v√°lidos pero l√≥gicamente incorrectos
 * - Est√°ndar HTTP para que frontend maneje errores apropiadamente
 *
 * C√≥digos comunes:
 * - 400: Validaci√≥n general (formato, requeridos)
 * - 409: Duplicados/conflictos
 * - 422: Reglas de negocio violadas
 */
const ParamHttpCodes = {
    // üìß ERRORES DE FORMATO (400 - Bad Request)
    'email': 400,                    // Email malformateado
    'phone': 400,                    // Tel√©fono malformateado
    'nif': 400,                      // NIF con formato incorrecto
    'clientName': 400,               // Campo requerido faltante
    'referenceCadastral': 400,       // Campo requerido faltante

    // üîÑ ERRORES DE CONFLICTO (409 - Conflict)
    'username': 409                  // Username ya existe (conflicto con BD)
};

// ==========================================
// üéõÔ∏è MIDDLEWARE PRINCIPAL
// ==========================================

/**
 * üö® Procesa errores de validaci√≥n y devuelve respuestas consistentes
 *
 * Proceso de manejo:
 * 1. Obtiene errores de express-validator
 * 2. Si no hay errores: contin√∫a al controller
 * 3. Si hay errores: busca mensajes personalizados
 * 4. Devuelve error espec√≠fico o gen√©rico al frontend
 *
 * @param {Object} req - Request object de Express
 * @param {Object} res - Response object de Express
 * @param {Function} next - Funci√≥n para continuar al siguiente middleware
 *
 * @returns {Object} Error response con c√≥digo HTTP y mensaje, o contin√∫a con next()
 *
 * @example
 * // En rutas:
 * router.post('/users',
 *   validateUser,      // 1. Ejecuta validaciones
 *   errorHandler,      // 2. Maneja errores si los hay
 *   createController   // 3. Solo ejecuta si no hay errores
 * );
 */
const errorHandler = (req, res, next) => {

    // ==========================================
    // üìã OBTENER RESULTADOS DE VALIDACI√ìN
    // ==========================================

    // üîç EXTRAER ERRORES DE EXPRESS-VALIDATOR
    // validationResult() obtiene todos los errores acumulados por los
    // middlewares de validaci√≥n ejecutados anteriormente en la cadena
    // Ejemplo: body('email').isEmail(), body('name').notEmpty(), etc.
    const errors = validationResult(req);

    // ‚úÖ VERIFICAR SI HAY ERRORES
    if (!errors.isEmpty()) {

        // üìù LOG PARA DEBUGGING Y AUDITOR√çA
        // En development: ayuda al programador a ver qu√© validaciones fallaron
        // En production: logs para detectar patrones de errores de usuarios
        console.debug("Validation errors:", errors.array());

        // üì¶ OBTENER LISTA DE ERRORES EN FORMATO ARRAY
        // Cada error tiene estructura: { path, msg, value, location }
        // - path: nombre del campo que fall√≥ (ej: 'email', 'username')
        // - msg: mensaje de error del validador
        // - value: valor que envi√≥ el usuario
        // - location: d√≥nde se encontr√≥ (body, query, params)
        const errorList = errors.array();

        // ==========================================
        // üîç BUSCAR ERRORES ESPEC√çFICOS MAPEADOS
        // ==========================================

        // üîÑ ITERAR SOBRE TODOS LOS ERRORES ENCONTRADOS
        // Buscar si alg√∫n error corresponde a un campo que tenemos mapeado
        // con mensaje personalizado y c√≥digo HTTP espec√≠fico
        for (const error of errorList) {

            // üéØ OBTENER NOMBRE DEL CAMPO QUE FALL√ì
            // error.path es la forma moderna, error.param es legacy
            // Ejemplo: si validamos body('email'), path ser√° 'email'
            const paramName = error.path || error.param;

            // üó∫Ô∏è VERIFICAR SI TENEMOS MAPEO PERSONALIZADO
            if (ParamErrorMessages[paramName]) {

                // üìä OBTENER C√ìDIGO HTTP ESPEC√çFICO
                // Si no est√° mapeado, usar 400 (Bad Request) como default
                const statusCode = ParamHttpCodes[paramName] || 400;

                // üì§ DEVOLVER ERROR PERSONALIZADO INMEDIATAMENTE
                // Primera coincidencia gana - no procesar m√°s errores
                // Esto evita mensajes confusos con m√∫ltiples errores
                return res.status(statusCode).json(ParamErrorMessages[paramName]);
            }
        }

        // ==========================================
        // üé≠ FALLBACK PARA ERRORES NO MAPEADOS
        // ==========================================

        // üîß ERROR GEN√âRICO SI NO HAY MAPEO ESPEC√çFICO
        // Esto maneja campos nuevos que a√∫n no tienen mensaje personalizado
        // O errores de validaciones que no son cr√≠ticos
        return res.status(400).json("Error de validaci√≥n");
    }

    // ==========================================
    // ‚úÖ NO HAY ERRORES - CONTINUAR
    // ==========================================

    // ‚û°Ô∏è CONTINUAR AL SIGUIENTE MIDDLEWARE O CONTROLLER
    // Solo se ejecuta si validationResult() no encontr√≥ errores
    // El request llega "limpio" al controller
    next();
};

export default errorHandler;

/*
==========================================
üí° EJEMPLOS DE USO EN RUTAS:
==========================================

üîß CONFIGURACI√ìN B√ÅSICA:
import { body } from 'express-validator';
import errorHandler from './middleware/errorHandler.js';

router.post('/users',
  [
    body('email').isEmail(),           // 1. Validar email
    body('username').notEmpty(),       // 2. Validar username
    body('phone').isMobilePhone()      // 3. Validar tel√©fono
  ],
  errorHandler,                        // 4. Manejar errores
  createUserController                 // 5. Solo ejecuta si no hay errores
);

üéØ CASOS DE RESPUESTA:

‚úÖ SIN ERRORES:
Request: { email: "juan@email.com", username: "juan123", phone: "666777888" }
‚Üí Contin√∫a al controller
‚Üí Controller ejecuta normalmente

‚ùå EMAIL INV√ÅLIDO:
Request: { email: "email-malformateado", username: "juan123", phone: "666777888" }
‚Üí Error en validaci√≥n de email
‚Üí errorHandler busca 'email' en ParamErrorMessages
‚Üí Response: 400 "Email inv√°lido"

‚ùå USERNAME DUPLICADO:
Request: { email: "juan@email.com", username: "admin", phone: "666777888" }
‚Üí Error en validaci√≥n de username (ya existe)
‚Üí errorHandler busca 'username' en ParamErrorMessages
‚Üí Response: 409 "Nombre de usuario duplicado"

‚ùå CAMPO NO MAPEADO:
Request: { email: "juan@email.com", age: "texto-en-lugar-de-numero" }
‚Üí Error en validaci√≥n de age (no est√° en mapeos)
‚Üí Response: 400 "Error de validaci√≥n"

==========================================
üîß C√ìMO EXTENDER PARA NUEVOS CAMPOS:
==========================================

üìù AGREGAR NUEVO CAMPO:
// 1. Agregar mensaje personalizado:
const ParamErrorMessages = {
  // ... campos existentes
  'password': 'La contrase√±a debe tener al menos 8 caracteres',
  'birthDate': 'Fecha de nacimiento inv√°lida'
};

// 2. Agregar c√≥digo HTTP:
const ParamHttpCodes = {
  // ... c√≥digos existentes
  'password': 400,        // Bad Request para formato
  'birthDate': 422        // Unprocessable Entity para l√≥gica
};

// 3. El errorHandler autom√°ticamente los usar√°

üé® PERSONALIZACI√ìN DE RESPUESTAS:
// Para respuestas m√°s complejas:
if (paramName === 'email') {
  return res.status(400).json({
    error: 'EMAIL_INVALID',
    message: 'Email inv√°lido',
    suggestion: 'Usar formato: usuario@dominio.com'
  });
}

==========================================
üõ°Ô∏è BENEFICIOS DE ESTE PATR√ìN:
==========================================

‚úÖ CONSISTENCIA:
- Todos los errores de validaci√≥n usan el mismo formato
- Mensajes uniformes en toda la aplicaci√≥n
- C√≥digos HTTP est√°ndar y predecibles

‚úÖ MANTENIBILIDAD:
- Un solo lugar para cambiar mensajes de error
- F√°cil agregar nuevos campos validados
- Separaci√≥n entre validaci√≥n y presentaci√≥n

‚úÖ UX MEJORADA:
- Mensajes user-friendly vs errores t√©cnicos
- C√≥digos HTTP que permiten manejo espec√≠fico en frontend
- Un error a la vez (no abrumar al usuario)

‚úÖ DEBUGGING:
- Logs detallados para desarrollo
- Informaci√≥n t√©cnica separada de mensajes de usuario
- Trazabilidad completa de errores de validaci√≥n
*/